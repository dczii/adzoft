{"version":3,"sources":["assets/logo.png","assets/laptop.svg","assets/vision.svg","assets/studio.svg","pages/Home/index.js","pages/ComingSoon/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Grid","container","className","item","xs","md","src","WorkSVG","alt","Container","VisionSVG","StudioSVG","ComingSoon","props","useSpring","from","left","top","width","height","background","to","next","a","div","style","logo","Header","Button","onClick","history","push","LogoPng","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9290b8a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b5d0cca6.png\";","module.exports = __webpack_public_path__ + \"static/media/laptop.76330926.svg\";","module.exports = __webpack_public_path__ + \"static/media/vision.5368e196.svg\";","module.exports = __webpack_public_path__ + \"static/media/studio.efc47eed.svg\";","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\n\nimport WorkSVG from '../../assets/laptop.svg';\nimport VisionSVG from '../../assets/vision.svg';\nimport StudioSVG from '../../assets/studio.svg';\nimport './styles.scss';\n\nfunction Home() {\nreturn (\n    <Grid container className='home-component'>\n    \n        <Grid item xs={12} md={8} className='section-work'>\n            <img src={WorkSVG} className='work-svg' alt='SVG' />\n            <Container>\n            <p className='title'>WORKS</p>\n            <h2>We create beautiful and functional websites for individuals and businesses.</h2>\n            </Container>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n            <Grid container className='App'>\n            \n            <Grid item xs={12} className='section-vision'>\n                <img src={VisionSVG} className='vision-svg' alt='SVG' />\n                <Container className='content-container'>\n                    <p className='title'>VISION</p>\n                    <h3>We bring world-class design and development services to our clients.</h3>\n                </Container>\n            </Grid>\n\n            <Grid item xs={12} className='section-vision section-team'>\n                <img src={StudioSVG} className='vision-svg' alt='SVG' />\n                <Container className='content-container'>\n                    <p className='title'>STUDIO</p>\n                    <h3>We approach projects with one vision.</h3>\n                </Container>\n            </Grid>\n            </Grid>\n        </Grid>\n    </Grid>\n);\n}\n\nexport default Home;\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring'\n\nimport logo from '../../assets/logo.png';\nimport './styles.scss';\n\nfunction ComingSoon() {\n  const props = useSpring({\n    from: { left: '0%', top: '0%', width: '0%', height: '0%', background: '#DF6E21' },\n    to: async next => {\n      while (1) {\n        await next({ left: '0%', top: '0%', width: '100%', height: '100%', background: '#DF6E21' })\n        await next({ height: '50%', background: '#2096BA' })\n        await next({ width: '50%', left: '50%', background: '#C5D2DB' })\n        await next({ top: '0%', height: '100%', background: '#DF6E21' })\n        await next({ top: '50%', height: '50%', background: '#2096BA' })\n        await next({ width: '100%', left: '0%', background: '#C5D2DB' })\n        await next({ width: '50%', background: '#DF6E21' })\n        await next({ top: '0%', height: '100%', background: '#2096BA' })\n        await next({ width: '100%', background: '#C5D2DB' })\n      }\n    },\n  })\n\n  return (\n    <div className=\"ComingSoon\">\n        <div className='animate-container'>\n          <animated.div className=\"script-box \" style={props} />\n        </div>\n\n        <div className='test-container'>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            COMING SOON\n          </p>\n\n        </div>\n      \n    </div>\n  );\n}\n\nexport default ComingSoon;","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport LogoPng from '../../assets/logo.png';\nimport './styles.scss';\n\nfunction Header(props) {\n  return (\n    <div className='header-component'>\n        <Button onClick={() => props.history.push('/')}>\n            <img src={LogoPng} height='auto' width='100px'alt='logo' />\n        </Button>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from './pages/Home';\nimport ComingSoon from './pages/ComingSoon';\nimport Header from './components/header';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={ComingSoon} />\n        <Route exact path=\"/staging\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}